import { expect } from "chai";
import * as path from "path";
import Hero from "../player/characters/hero";
import HeroBuilder from "../player/characters/hero-builder";
import Decoration from "../registry/objects/decoration";
import Farm from "../registry/objects/farm";
import Mill from "../registry/objects/mill";
import ObjectFactory from "../registry/objects/object-factory";
import Storehouse from "../registry/objects/storehouse";
import Registry from "../registry/registry";

const data = require(path.join(__dirname, "/../", "test", "data", "registry.json"));
const registry = Registry.create(data);

describe("test factory", () => {

    const FARM_ID = 1;
    const farmData = registry.objects[FARM_ID];
    const farmObject = ObjectFactory.create(farmData) as Farm;
    const MILL_ID = 2;
    const millData = registry.objects[MILL_ID];
    const millObject = ObjectFactory.create(millData) as Mill;
    const STOREHOUSE_ID = 3;
    const storehouseData = registry.objects[STOREHOUSE_ID];
    const storehouseObject = ObjectFactory.create(storehouseData) as Storehouse;

    it("should create storehouse object", () => {
        expect(storehouseObject).to.be.instanceOf(Storehouse);
    });

    it("should create farm object", () => {
        expect(farmObject).to.be.instanceOf(Farm);
    });

    it("should create mill object", () => {
        expect(millObject).to.be.instanceOf(Mill);
    });
});

describe("test builder", () => {
    it("should create hero", () => {
        const hero = new HeroBuilder()
            .setName("Alex")
            .setGender("male")
            .setHaircut("buzz cut")
            .setEyes("hazel")
            .setClothes(["jeans", "t-short"])
            .setAccessories(["watch"])
            .build();
        expect(hero).to.be.instanceOf(Hero);
        expect(hero).to.have.property("name", "Alex");
    });
});

describe("test prototype", () => {
    const DECORATION_ID = 4;
    const decorationData = registry.objects[DECORATION_ID];
    const decorationObject = ObjectFactory.create(decorationData) as Decoration;

    it("should create decoration object", () => {
        expect(decorationObject).to.be.instanceOf(Decoration);
    });

    it("should clone decoration object", () => {
        expect(decorationObject.clone()).to.be.instanceOf(Decoration);
    });

});

describe("test singleton", () => {
    it("should create registry singletone", () => {
        expect(registry).to.be.instanceOf(Registry);
    });

    it("should have objects data", () => {
        expect(registry).to.have.nested.property("objects[1]");
    });

    it("should not create Registry", () => {
        expect(() => Registry.create(data)).to.throw();
    });

    it("should not create new instance of Registry", () => {
        expect(() => new Registry(data)).to.throw();
    });

    it("should have instance of Registry", () => {
        expect(Registry.getInstance()).to.instanceOf(Registry);
    });
});
